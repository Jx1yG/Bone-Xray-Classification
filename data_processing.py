# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vy6dfq4mIkMUZPO7CG-kHtMtIGhPf7P-
"""

import numpy as np
import os
from PIL import Image
from sklearn.model_selection import train_test_split
import tensorflow as tf

def get_labels(image_path):
    parts = image_path.split('/')
    body_part = parts[-3]
    abnormality = 1 if 'positive' in parts[-2] else 0
    return body_part, abnormality

def load_dataset():
    dataset_path = 'data/MURA-v1.1'
    image_size = (224, 224)
    body_parts = ['XR_ELBOW', 'XR_FINGER', 'XR_FOREARM']

    image_paths = [os.path.join(root, file) for root, _, files in os.walk(dataset_path) for file in files if file.endswith('.png')]
    body_part_labels = []
    abnormality_labels = []
    all_images = []

    for image_path in image_paths:
        for body_part in body_parts:
            if body_part in image_path:
                body_part, abnormality = get_labels(image_path)
                body_part_labels.append(body_part)
                abnormality_labels.append(abnormality)

                img = Image.open(image_path).convert('RGB').resize(image_size)
                img_array = np.array(img)
                all_images.append(img_array)

    # Encode body part labels (one-hot encoding)
    body_part_labels_encoded = tf.keras.utils.to_categorical([body_parts.index(part) for part in body_part_labels], num_classes=3)

    # Convert to NumPy arrays
    all_images = np.array(all_images)
    abnormality_labels = np.array(abnormality_labels)

    # Split into training and validation sets
    x_train, x_val, y_train_abnormality, y_val_abnormality, y_train_body_part, y_val_body_part = train_test_split(
        all_images, abnormality_labels, body_part_labels_encoded, test_size=0.2, random_state=42)

    # Normalize pixel values
    x_train = x_train / 255.0
    x_val = x_val / 255.0

    return x_train, y_train_abnormality, y_train_body_part, x_val, y_val_abnormality, y_val_body_partimport numpy as np
import os
from PIL import Image
from sklearn.model_selection import train_test_split
import tensorflow as tf

def get_labels(image_path):
    parts = image_path.split('/')
    body_part = parts[-3]
    abnormality = 1 if 'positive' in parts[-2] else 0
    return body_part, abnormality

def load_dataset():
    dataset_path = 'data/MURA-v1.1'
    image_size = (224, 224)
    body_parts = ['XR_ELBOW', 'XR_FINGER', 'XR_FOREARM']

    image_paths = [os.path.join(root, file) for root, _, files in os.walk(dataset_path) for file in files if file.endswith('.png')]
    body_part_labels = []
    abnormality_labels = []
    all_images = []

    for image_path in image_paths:
        for body_part in body_parts:
            if body_part in image_path:
                body_part, abnormality = get_labels(image_path)
                body_part_labels.append(body_part)
                abnormality_labels.append(abnormality)

                img = Image.open(image_path).convert('RGB').resize(image_size)
                img_array = np.array(img)
                all_images.append(img_array)

    # Encode body part labels (one-hot encoding)
    body_part_labels_encoded = tf.keras.utils.to_categorical([body_parts.index(part) for part in body_part_labels], num_classes=3)

    # Convert to NumPy arrays
    all_images = np.array(all_images)
    abnormality_labels = np.array(abnormality_labels)

    # Split into training and validation sets
    x_train, x_val, y_train_abnormality, y_val_abnormality, y_train_body_part, y_val_body_part = train_test_split(
        all_images, abnormality_labels, body_part_labels_encoded, test_size=0.2, random_state=42)

    # Normalize pixel values
    x_train = x_train / 255.0
    x_val = x_val / 255.0

    return x_train, y_train_abnormality, y_train_body_part, x_val, y_val_abnormality, y_val_body_part